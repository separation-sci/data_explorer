runApp()
runApp()
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
fluidRow(
#left side panel
column(
width = 3,
#side panel for loading files
wellPanel(
p(strong("Filters test for files:")),
dateRangeInput(inputId = "date_filter",
label = "by date"),
textInput(inputId = "text_filter",
label = "by name"),
selectInput(
inputId = "folders",
label = "by folder",
choices = meta_data_for_selection$folder %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
hr(),
#TODO: javascript code to hovertext the fullname.
selectInput(
inputId = "files",
label = "Files to plot:",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
fluidRow(actionButton("lock", "Lock"),
actionButton("clear", "Clear"))
)
),
#main panel for graphs
column(
width = 6,
wellPanel(plotOutput(outputId = "graphs"),
position = c("right")),
#main panel for parameters
wellPanel(
actionButton(inputId = "test", label = "telstj"),
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
),
#right side panel for saved graphs
#TODO: edit saved graphs. remove saved graphs.
#TODO: export data and graph code
column(width = 3,
wellPanel(
p(strong("Saved graphs:")),
actionButton("save", "Save Graph")
), )
),
#metadata for each currently plotted piece of data
fluidRow(wellPanel(
p(
strong("Meta data:"),
textOutput("log"),
dataTableOutput("metadata")
)
))
)
runApp()
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
fluidRow(
#left side panel
column(
width = 3,
#side panel for loading files
wellPanel(
p(strong("Filters test for files:")),
dateRangeInput(inputId = "date_filter",
label = "by date"),
textInput(inputId = "text_filter",
label = "by name"),
selectInput(
inputId = "folders",
label = "by folder",
choices = meta_data_for_selection$folder %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
hr(),
#TODO: javascript code to hovertext the fullname.
selectInput(
inputId = "files",
label = "Files to plot:",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
fluidRow(actionButton("lock", "Lock"),
actionButton("clear", "Clear"))
)
),
#main panel for graphs
column(
width = 6,
wellPanel(plotOutput(outputId = "graphs"),
position = c("right")),
#main panel for parameters
wellPanel(
sliderInput(
inputId = "sdfs",
label = "ewf",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
),
#right side panel for saved graphs
#TODO: edit saved graphs. remove saved graphs.
#TODO: export data and graph code
column(width = 3,
wellPanel(
p(strong("Saved graphs:")),
actionButton("save", "Save Graph")
), )
),
#metadata for each currently plotted piece of data
fluidRow(wellPanel(
p(
strong("Meta data:"),
textOutput("log"),
dataTableOutput("metadata")
)
))
)
runApp()
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
fluidRow(
#left side panel
column(
width = 3,
#side panel for loading files
wellPanel(
p(strong("Filters for files:")),
dateRangeInput(inputId = "date_filter",
label = "by date"),
textInput(inputId = "text_filter",
label = "by name"),
selectInput(
inputId = "folders",
label = "by folder",
choices = meta_data_for_selection$folder %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
hr(),
#TODO: javascript code to hovertext the fullname.
selectInput(
inputId = "files",
label = "Files to plot:",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
fluidRow(actionButton("lock", "Lock"),
actionButton("clear", "Clear"))
)
),
#main panel for graphs
column(
width = 6,
wellPanel(plotOutput(outputId = "graphs"),
position = c("right")),
#main panel for parameters
wellPanel(
p(strong("Parameters:")),
actionButton(
inputId = "sdfs",
label = "ewf",
width = "100%"
),
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
),
#right side panel for saved graphs
#TODO: edit saved graphs. remove saved graphs.
#TODO: export data and graph code
column(width = 3,
wellPanel(
p(strong("Saved graphs:")),
actionButton("save", "Save Graph")
), )
),
#metadata for each currently plotted piece of data
fluidRow(wellPanel(
p(
strong("Meta data:"),
textOutput("log"),
dataTableOutput("metadata")
)
))
)
runApp()
rm(server)
rm(ui)
runApp()
runApp()
source()
source(app.R)
# Define server logic required to draw a histogram ----
server = function(input, output) {
observeEvent(input$folders,
{
updateSelectInput(session = getDefaultReactiveDomain(),
input = "files",
choices = meta_data_for_selection[meta_data_for_selection$folder %in% input$folders,]$file)
})
output$graphs = renderPlot({
if (length(input$files) == 0) {
plot_data = 0
}
else
{
plot_data = raw_data[basename(raw_data$flnm) %in% input$files,]
plot(
plot_data$time,
plot_data$RFU,
type = "l",
xlab = "time",
ylab = "RFU",
xlim = input$x_axis,
ylim = input$y_axis
)
}
output$results_basic <- renderPrint({
input$rank_list_basic # This matches the input_id of the rank list
})
})
# output$metadata = renderDataTable({
#   metadata_display = meta_data[basename(meta_data$flnm) %in% input$files,]
#   metadata_display
# })
}
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
fluidRow(
#left side panel
column(
width = 3,
#side panel for loading files
wellPanel(
p(strong("Filters for files:")),
dateRangeInput(inputId = "date_filter",
label = "by date"),
textInput(inputId = "text_filter",
label = "by name"),
selectInput(
inputId = "folders",
label = "by folder",
choices = meta_data_for_selection$folder %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
hr(),
#TODO: javascript code to hovertext the fullname.
selectInput(
inputId = "files",
label = "Files to plot:",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
fluidRow(actionButton("lock", "Lock"),
actionButton("clear", "Clear"))
)
),
#main panel for graphs
column(
width = 6,
wellPanel(plotOutput(outputId = "graphs"),
position = c("right")),
#main panel for parameters
wellPanel(
p(strong("Parameters:")),
actionButton(
inputId = "sdfs",
label = "ewf",
width = "100%"
),
sliderInput(
inputId = "x_axis",
label = "x-axsdfsis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
),
#right side panel for saved graphs
#TODO: edit saved graphs. remove saved graphs.
#TODO: export data and graph code
column(width = 3,
wellPanel(
p(strong("Saved graphs:")),
actionButton("save", "Save Graph")
), )
),
#metadata for each currently plotted piece of data
fluidRow(wellPanel(
p(
strong("Meta data:"),
textOutput("log"),
dataTableOutput("metadata")
)
))
)
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
ui = fluidPage(
numericInput("lat", "Latitude"),
numericInput("long", "Longitude"),
uiOutput("cityControls")
)
server = function(input, output) {
output$cityControls <- renderUI({
cities <- getNearestCities(input$lat, input$long)
checkboxGroupInput("cities", "Choose Cities", cities)
})
}
?numericInput
shinyApp(server, ui)
ui = fluidPage(
numericInput("lat", "Latitude", value = 0),
numericInput("long", "Longitude", value = 0),
uiOutput("cityControls")
)
server = function(input, output) {
output$cityControls <- renderUI({
cities <- getNearestCities(input$lat, input$long)
checkboxGroupInput("cities", "Choose Cities", cities)
})
}
shinyApp(server, ui)
library(shiny)
ui = fluidPage(
numericInput("lat", "Latitude", value = 0),
numericInput("long", "Longitude", value = 0),
uiOutput("cityControls")
)
server = function(input, output) {
output$cityControls <- renderUI({
cities <- getNearestCities(input$lat, input$long)
checkboxGroupInput("cities", "Choose Cities", cities)
})
}
shinyApp(server, ui)
View(server)
shinyApp(server, ui)
?shinyapp
?shinyApp
shinyApp(server = server, ui = ui)
runApp('examples.R')
runApp('examples.R')
update_rank_list
debugonce(update_rank_list)
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(tidyverse)
library(sortable)
runApp()
runApp()
runApp()
runApp()
cars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(meta_data_for_selection)
test = meta_data_for_selection[c(1,3,5)]
test = meta_data_for_selection[c(1,3,5),]
View(meta_data_for_selection)
View(ui)
View(test)
View(test)
test_files = test
test_current_plots
test_current_plots = meta_data_for_selection[c(3, 5, 6, 7),]
test %in% test_current_plots
test_current_plots %in% test
library(tidyverse)
%in%
test$file %in% test_current_plots$file
test$file !%in% test_current_plots$file
View(test_current_plots)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test_current_plots
test_current_plots = test_current_plots$file
test
test_files= test_files$file
test_files %in% test_current_plots
test_files[test_files %in% test_current_plots]
test_files[!(test_files %in% test_current_plots)]
runApp()
runApp()
runApp()
gc()
shiny::runApp()
