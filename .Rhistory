),
selectInput(
inputId = "folders",
label = "Select Folders",
choices = dirname(meta_data$flnm) %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
selectInput(
inputId = "files",
label = "Select files to plot",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
actionButton("plot", "Lock me in"),
actionButton("clear", "Erase everything"),
textOutput("log")
),
mainPanel(plotOutput(outputId = "graphs"),
position = c("right")),
# tableOutput(outputId = "meta_data"),
mainPanel(
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
)
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
sidePanel(
flowLayout(
dateRangeInput(inputId = "date_filter",
label = "Date range to filter"),
actionButton("date_button", "align me")
),
flowLayout(
textInput(inputId = "text_filter",
label = "Text to filter"),
actionButton("text_button", "me too")
),
selectInput(
inputId = "folders",
label = "Select Folders",
choices = dirname(meta_data$flnm) %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
selectInput(
inputId = "files",
label = "Select files to plot",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
actionButton("plot", "Lock me in"),
actionButton("clear", "Erase everything"),
textOutput("log")
),
mainPanel(plotOutput(outputId = "graphs"),
position = c("right"))
# tableOutput(outputId = "meta_data"),
# mainPanel(
#   sliderInput(
#     inputId = "x_axis",
#     label = "x-axis",
#     value = c(0, 20),
#     min = 0,
#     max = 20,
#     width = "100%"
#   ),
#   sliderInput(
#     inputId = "y_axis",
#     label = "y-axis",
#     value = c(0, max(raw_data$RFU * 3) / 4),
#     min = 0,
#     max = max(raw_data$RFU),
#     width = "100%"
#   )
)
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
mainPanel(
flowLayout(
dateRangeInput(inputId = "date_filter",
label = "Date range to filter"),
actionButton("date_button", "align me")
),
flowLayout(
textInput(inputId = "text_filter",
label = "Text to filter"),
actionButton("text_button", "me too")
),
selectInput(
inputId = "folders",
label = "Select Folders",
choices = dirname(meta_data$flnm) %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
selectInput(
inputId = "files",
label = "Select files to plot",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
actionButton("plot", "Lock me in"),
actionButton("clear", "Erase everything"),
textOutput("log")
),
mainPanel(plotOutput(outputId = "graphs"),
position = c("right")),
# tableOutput(outputId = "meta_data"),
mainPanel(
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
)
shinyApp(ui = ui, server = server)
# Create Shiny app ----
options(shiny.host = '0.0.0.0')
options(shiny.port = 5050)
shinyApp(ui = ui, server = server)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
runApp('run.R')
# UI ----------------------------------------------------------------------
ui <- fluidPage(
titlePanel("Data Explorer"),
sideBarPanel(
flowLayout(
dateRangeInput(inputId = "date_filter",
label = "Date range to filter"),
actionButton("date_button", "align me")
),
flowLayout(
textInput(inputId = "text_filter",
label = "Text to filter"),
actionButton("text_button", "me too")
),
selectInput(
inputId = "folders",
label = "Select Folders",
choices = dirname(meta_data$flnm) %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
selectInput(
inputId = "files",
label = "Select files to plot",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
actionButton("plot", "Lock me in"),
actionButton("clear", "Erase everything"),
textOutput("log")
),
mainPanel(plotOutput(outputId = "graphs"),
position = c("right")),
# tableOutput(outputId = "meta_data"),
mainPanel(
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
)
# UI ----------------------------------------------------------------------
ui <- fluidPage(
headerPanel("Data Explorer"),
sidebarPanel(
dateRangeInput(inputId = "date_filter",
label = "Date range to filter"),
actionButton("date_button", "align me"),
textInput(inputId = "text_filter",
label = "Text to filter"),
actionButton("text_button", "me too"),
selectInput(
inputId = "folders",
label = "Select Folders",
choices = dirname(meta_data$flnm) %>% unique(),
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 7
),
selectInput(
inputId = "files",
label = "Select files to plot",
choices = NULL,
multiple = TRUE,
selectize = FALSE,
width = '100%',
size = 10
),
actionButton("plot", "Lock me in"),
actionButton("clear", "Erase everything"),
textOutput("log")
),
mainPanel(plotOutput(outputId = "graphs"),
position = c("right")),
# tableOutput(outputId = "meta_data"),
mainPanel(
sliderInput(
inputId = "x_axis",
label = "x-axis",
value = c(0, 20),
min = 0,
max = 20,
width = "100%"
),
sliderInput(
inputId = "y_axis",
label = "y-axis",
value = c(0, max(raw_data$RFU * 3) / 4),
min = 0,
max = max(raw_data$RFU),
width = "100%"
)
)
)
shinyApp(ui = ui, server = server)
runApp('run.R')
runApp()
runApp('run.R')
runApp('run.R')
# Create Shiny app ----
# options(shiny.host = '0.0.0.0')
# options(shiny.port = 5050)
shinyApp(ui = ui, server = server)
runApp('run.R')
?options
getOption()
getOptions()
getOption()
getOption(shiny.host)
getOption("shiny.host")
options(shiny.host = "localhost")
getOption("shiny.host")
# Create Shiny app ----
# options(shiny.host = '0.0.0.0')
# options(shiny.port = 5050)
shinyApp(ui = ui, server = server)
library(shiny); runApp('run.R')
runApp('run.R')
# Create Shiny app ----
# options(shiny.host = '0.0.0.0')
# options(shiny.port = 5050)
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp('run.R')
runApp()
runApp()
runApp()
runApp('run.R')
runApp('run.R')
runApp()
shinyApp(ui = ui, server = server)
rm(ui)
rm(server)
runApp('run.R')
shinyApp(ui = ui, server = server)
library(shiny); runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp()
View(raw_data)
runApp('run.R')
View(meta_data)
View(raw_data)
runApp()
runApp('run.R')
runApp()
runApp('run.R')
runApp()
View(plot_data)
input$files
runApp()
input$files
raw_data %>% head()
raw_data[raw_data$unique_id %in% input$files,]
raw_data$unique_id %in% input$files
raw_data$unique_id %in% input$files %>% unique()
input$files
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shiny); runApp('run.R')
# library(shiny)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
View(metadata_display)
colnames(metadata_display) %>% length()
metadata_display %>% colnames()
metadata_display
metadata_display %>% View())
metadata_display %>% View()
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp()
expr
assign.env
View(assign.env)
?invisible
?match.arg
runApp()
?attr
?markRenderFunction
runApp('run.R')
type (meta_data)
class(meta_data)
?renderTable
runApp('run.R')
runApp('run.R')
xtable::xtable()
?xtable::xtable()
?xtable::xtable(meta_data)
xtable::xtable(meta_data)
xtable::xtable(data.frame(V1 = "hello"))
xtable::xtable(meta_data[1:2])
xtable::xtable(meta_data[1:15])
xtable::xtable(meta_data[1:10])
xtable::xtable(meta_data[1:8])
xtable::xtable(meta_data[1:5])
xtable::xtable(iris)
iris %>% colnames()
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp()
runApp('run.R')
runApp()
runApp()
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
runApp('run.R')
library(shiny)
shinyApp(ui, server)
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
vars <- setdiff(names(iris), "Species")
ui = fluidPage(pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', vars),
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
)
shinyApp(ui, server)
ui = fluidPage(pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', vars),
selectInput('ycol', 'Y Variable', vars, selected = vars[[2]]),
numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
)
shinyApp(ui, server)
source("figure_functions_4.R")
# Create Shiny app ----
options(shiny.host = '0.0.0.0')
options(shiny.port = 5050)
shinyApp(ui = ui, server = server)
source("ui.R")
source("server.R")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
runApp()
meta_data
meta_data
xtable(meta_data)
DT::xtable(meta_data)
xtable::xtable(meta_data)
xtable::xtable() %>% View()
debugonce(xtable::xtable)
xtable::xtable(meta_data)
n
xtable::xtable(data.frame(V1 = "one", V2 = "two"))
xtable::xtable(data.frame(V1 = "one", V2 = "two", V3 = "lsdkfj",
V4 = "sdlfkj", V5 = "sldfkjsdf"))
xtable::xtable(data.frame(V1 = "one", V2 = "two", V3 = "lsdkfj",
V4 = "sdlfkj", V5 = "sldfkjsdf",
V6 = "sldkfjdslfkj"))
xtable::xtable(data.frame(V1 = "one", V2 = "two", V3 = "lsdkfj",
V4 = "sdlfkj", V5 = "sldfkjsdf",
V6 = "sldkfjdslfkj",
V7 = "sldkfjdslkj"))
xtable::xtable(data.frame(meta_data[1:5]))
xtable::xtable(data.frame(meta_data[1:6]))
meta_data[1:6]
meta_data[1:6] %>% View()
xtable::xtable(data.frame(meta_data[1:15]))
xtable::xtable(data.frame(meta_data[1:10]))
xtable::xtable(data.frame(meta_data[1:8]))
xtable::xtable(data.frame(meta_data[1:7]))
runApp()
runApp()
runApp()
runApp()
runApp()
